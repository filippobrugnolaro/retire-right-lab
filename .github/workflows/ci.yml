name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

permissions:
    contents: read

jobs:
    # Validation job - runs on both PRs and main pushes
    validate:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Validate commit messages
              run: |
                  # Get all commit messages in the PR (or single commit for push to main)
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    commits=$(git log --format="%s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
                  else
                    commits=$(git log --format="%s" -1)
                  fi

                  # Check each commit message
                  echo "$commits" | while read -r commit_msg; do
                    # Allow merge commits (case insensitive)
                    if [[ "$commit_msg" =~ ^[Mm]erge ]]; then
                      echo "✅ Valid merge commit: '$commit_msg'"
                    # Check regular commit message format
                    elif [[ "$commit_msg" =~ ^(fix|feature|feat|refactor|chore|docs|test)(\(.+\))?: ]]; then
                      echo "✅ Valid commit message: '$commit_msg'"
                    else
                      echo "❌ Invalid commit message: '$commit_msg'"
                      echo "Commit messages must start with one of: fix, feature, feat, refactor, chore, docs, test, merge, Merge"
                      echo "Examples:"
                      echo "  fix: resolve login issue"
                      echo "  feat(calculator): add new pension calculation"
                      echo "  docs: update README"
                      echo "  Merge branch 'feature/new-feature' into main"
                      exit 1
                    fi
                  done

            - name: Validate branch naming (for PRs)
              if: github.event_name == 'pull_request'
              run: |
                  branch_name="${{ github.head_ref }}"

                  # Allow "develop" as special exception
                  if [[ "$branch_name" == "develop" ]]; then
                    echo "✅ Valid branch name (special exception): '$branch_name'"
                    exit 0
                  fi

                  if [[ ! "$branch_name" =~ ^(fix|feature|feat|refactor|chore|docs|test)/ ]]; then
                    echo "❌ Invalid branch name: '$branch_name'"
                    echo "Branch names must start with one of: fix/, feature/, feat/, refactor/, chore/, docs/, test/"
                    echo "Special exception: 'develop' branch is allowed"
                    echo "Examples:"
                    echo "  fix/login-issue"
                    echo "  feature/pension-calculator"
                    echo "  docs/update-readme"
                    echo "  develop (special branch)"
                    exit 1
                  else
                    echo "✅ Valid branch name: '$branch_name'"
                  fi

    # Build and test job - runs only on main branch pushes
    build-and-test:
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        needs: validate
        steps:
            - uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "22"
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run linting
              run: pnpm lint

            - name: Run type checking
              run: pnpm exec tsc --noEmit

            - name: Run tests
              run: |
                  if ls **/*.test.js **/*.spec.js >/dev/null 2>&1; then
                    pnpm test
                  else
                    echo "No test files found. Skipping test step."
                  fi

            - name: Build project
              run: pnpm build
