name: CI

on:
    workflow_dispatch:
        inputs:
            target_branch:
                description: "Target branch to validate against (e.g., main)"
                required: false
                default: "main"
            pr_number:
                description: "PR number to validate (optional)"
                required: false

permissions:
    contents: read

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Validate commit messages
              run: |
                  # Determine which commits to validate
                  if [[ -n "${{ github.event.inputs.pr_number }}" ]]; then
                    # Get commits from specified PR
                    pr_number="${{ github.event.inputs.pr_number }}"
                    target_branch="${{ github.event.inputs.target_branch || 'main' }}"
                    echo "Validating commits from PR #${pr_number} against ${target_branch}"
                    
                    # Get PR commits using GitHub CLI or git
                    commits=$(git log --format="%s" origin/${target_branch}..HEAD)
                  else
                    # Get the last commit message for single commit validation
                    echo "Validating last commit message"
                    commits=$(git log --format="%s" -1)
                  fi

                  # Check each commit message
                  invalid_count=0
                  echo "$commits" | while read -r commit_msg; do
                    if [[ -z "$commit_msg" ]]; then
                      continue
                    fi
                    
                    # Allow merge commits (case insensitive)
                    if [[ "$commit_msg" =~ ^[Mm]erge ]]; then
                      echo "✅ Valid merge commit: '$commit_msg'"
                    # Check regular commit message format
                    elif [[ "$commit_msg" =~ ^(fix|feature|feat|refactor|chore|docs|test)(\(.+\))?: ]]; then
                      echo "✅ Valid commit message: '$commit_msg'"
                    else
                      echo "❌ Invalid commit message: '$commit_msg'"
                      echo "Commit messages must start with one of: fix, feature, feat, refactor, chore, docs, test, merge, Merge"
                      echo "Examples:"
                      echo "  fix: resolve login issue"
                      echo "  feat(calculator): add new pension calculation"
                      echo "  docs: update README"
                      echo "  Merge branch 'feature/new-feature' into main"
                      exit 1
                    fi
                  done

            - name: Validate branch naming
              run: |
                  # Get the current branch name
                  branch_name="${{ github.ref_name }}"

                  # Skip validation for main branch
                  if [[ "$branch_name" == "main" ]]; then
                    echo "✅ Skipping validation for main branch"
                    exit 0
                  fi

                  # Validate branch naming convention
                  if [[ ! "$branch_name" =~ ^(fix|feature|feat|refactor|chore|docs|test)/[a-zA-Z0-9._-]+$ ]]; then
                    echo "❌ Invalid branch name: '$branch_name'"
                    echo ""
                    echo "Branch names must follow the pattern: <type>/<name>"
                    echo "Valid types: fix, feature, feat, refactor, chore, docs, test"
                    echo ""
                    echo "Examples:"
                    echo "  fix/login-issue"
                    echo "  feature/pension-calculator"
                    echo "  feat/new-chart-component"
                    echo "  refactor/calculator-utils"
                    echo "  chore/update-dependencies"
                    echo "  docs/api-documentation"
                    echo "  test/add-unit-tests"
                    echo ""
                    echo "Invalid examples:"
                    echo "  ❌ bugfix/something (use 'fix' instead)"
                    echo "  ❌ enhancement/feature (use 'feature' or 'feat' instead)"
                    echo "  ❌ fix-login-issue (missing slash)"
                    echo "  ❌ fix/ (missing name after slash)"
                    exit 1
                  else
                    echo "✅ Valid branch name: '$branch_name'"
                  fi

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "22"
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run linting
              run: pnpm lint

            - name: Run type checking
              run: pnpm exec tsc --noEmit

            - name: Run tests
              run: |
                  if ls **/*.test.js **/*.spec.js >/dev/null 2>&1; then
                    pnpm test
                  else
                    echo "No test files found. Skipping test step."
                  fi

            - name: Build project
              run: pnpm build
